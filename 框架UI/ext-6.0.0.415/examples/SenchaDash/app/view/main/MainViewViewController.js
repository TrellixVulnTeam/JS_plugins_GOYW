/*
 * File: app/view/main/MainViewViewController.js
 *
 * This file was generated by Sencha Architect version 3.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('SenchaDash.view.main.MainViewViewController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.mainmainview',
    listen : {
        controller : {
            '#' : {
                unmatchedroute : 'routeChange'
            }
        }
    },

    init: function() {
        var me=this;
        me.inside_click=false;
        me.ntp=Ext.ComponentQuery.query('#navigationTreePanel')[0];
        me.last_expanded_record=null;
        me.nav_popup=null;
        me.nav_tree_collapsed=false;
        me.valid_views={};
        me.root=me.ntp.getRootNode();        
        me.collectViews(me.root, null, true);
        me.destroy_timer=null;
    },
    routeChange:function(){
        var me = this;
        var nextview  = window.location.hash.substring(1);
        me.setCurrentView(nextview);
    },
    resetClickFlag : function() {
        this.inside_click=false;  
    },

    collectViews: function(node, parent, is_root) {
        var me=this;
        if(node.data.view !== undefined) {
            me.valid_views[node.data.view]=(is_root? null : parent);
        }
        var num_children=node.childNodes.length;
        for(var ii = 0; ii < num_children; ii++) {
            me.collectViews(node.childNodes[ii], (is_root? null : node), false);
        }
    },

    setCurrentView: function(viewclass, is_popup) {
        var me=this;
        if(is_popup == undefined) { 
            is_popup=false; 
        };
        
        var vmdata=me.getViewModel().data;
        if(vmdata.currentView) {
            vmdata.currentView.destroy();
        }

        // set hashTag to  viewclass
        window.location.hash = '#'+ viewclass.replace("SenchaDash.view.", "");

        var treePanelData = Ext.ComponentQuery.query('#navigationTreePanel')[0].getStore().getRoot().data.children;
        var flag=false;
        for(i=0; i<treePanelData.length; i++){
            if(treePanelData[i].view==undefined){
                var childLen=treePanelData[i].children.length;
                for(j=0;j<childLen;j++){
                    if(treePanelData[i].children[j].view==viewclass)
                    {
                        flag=true;
                        break;
                    }
                }
            }else{
                if(treePanelData[i].view==viewclass){
                    flag = true;
                    break;
                }
            }
        }
        if(flag){
            vmdata.currentView = Ext.create("SenchaDash.view."+viewclass);
            
        }else{
            vmdata.currentView = Ext.create("SenchaDash.view.pages.Error404Window");

        }
        var mainCardPanel = me.getView().query('#mainCardPanel')[0];
        mainCardPanel.add(vmdata.currentView)

    },

    collapseLast : function(dataview) {
        var me=this;
        if(me.last_expanded_record != null) {
            me.collapseRecord(dataview, me.last_expanded_record);
        }
    },

    addNodeCls: function(view, node) {
                var me=this;
                if(node.hasChildNodes()) {
                    view.addItemCls(node, "node_with_children");
                    node.eachChild(function(cnode) { me.addNodeCls(view, cnode); });
                } else {
                    view.addItemCls(node, "node_without_children");
                }
    },

    collapseRecord: function(dataview, record) {
                        if(record.isExpanded()) {
                            dataview.removeItemCls(record, "node_expanded");
                            record.collapse();
                        }
    },

    expandRecord: function(dataview, record) {
                    var me=this;
                    if(me.nav_tree_collapsed) { 
                        return; 
                    }
                    if(record.isExpanded()) {
                        return;
                    }
                    if(me.last_expanded_record != null) {
                        me.collapseRecord(dataview, me.last_expanded_record);
                    }

                    record.expand();
                    dataview.addItemCls(record, "node_expanded");
                    record.eachChild(function(cnode) {
                        dataview.addItemCls(cnode, "childnode");
                    }
                    );
                    me.last_expanded_record=record;
    },

    destroyNavPopup : function() {
        var me=this;
        me.removeDestroyer();
        me.destroy_timer=setTimeout(function() {
            if(me.nav_popup) {
                me.nav_popup.destroy();
                me.nav_popup=null;
            }
        }, 750);
    },

    removeDestroyer : function() {
        var me=this;
        if(me.destroy_timer) {
            clearTimeout(me.destroy_timer);
            me.destroy_timer=null;
        }
    },


    createClickFunction : function(dataview, record) {
       var me=this;
       return function() {
            me.onNavigationTreePanelItemClick(dataview, record);
       };
    },

    onNavigationTreePanelItemHover: function(treepanel, record, dom, index, e) {
        this.showPopUp(treepanel, record, dom, index, e);
    },

    showPopUp: function(treepanel, record, dom, index, e){
        var me=this;
        if(me.nav_tree_collapsed) {
            me.removeDestroyer();
            var num_items=1;
            var itemsArr=[];
            if(me.nav_popup) {
                me.nav_popup.destroy();
                me.nav_popup=null;
            }
            if(record.data.children !== null) {
                var treedata=record.childNodes;
                num_items=treedata.length;
                if(num_items > 0) {
                    for(var ii=0; ii < num_items; ii++) {
                        var tree_record=treedata[ii];
                        itemsArr.push({
                            "text": tree_record.data.text,
                             handler: me.createClickFunction(treepanel, tree_record)
                        });
                    }
                }

            var menuHeight = (num_items * 36)+2;

            me.nav_popup = Ext.create("Ext.menu.Menu", {
                height: menuHeight,
                width: 200,
                cls: "coditas-nav-popup x-panel-body-navigation-dark",
                items: itemsArr,
                listeners:{
                    mouseleave: function(menu) {
                        me.nav_popup.destroy();
                        me.nav_popup=null;
                    },
                    mouseover : function() {
                        me.removeDestroyer();
                    }
                }
            });
            me.getView().add(me.nav_popup);
            me.nav_popup.showAt(79, e.pageY);
            }
        }
    },

    onNavigationTreePanelItemClick: function(dataview, record, item, index, e, eOpts) {
        var me=this;
        if(me.nav_tree_collapsed && Ext.os.deviceType=="Phone") {
            this.showPopUp(dataview, record, item, index, e);
        }
        if(me.inside_click) { return; }
        me.inside_click=true;

        setTimeout(function() {
            me.resetClickFlag();
        }, 500);

        var nextview=record.data.view;
        var hasView=(nextview != undefined);
        var hasChildren=(record.childNodes.length > 0);
        var parent=(nextview in me.valid_views)? me.valid_views[nextview] : null;
        var hasParent=(parent != null);

        //if(me.nav_tree_collapsed != record.data.collapse_menu) {
            //me.nav_tree_collapsed=record.data.collapse_menu;
        //}

        if(hasParent) {
            me.expandRecord(dataview, parent);
        } else if(hasChildren) {
            if(record.isExpanded()) {
                me.collapseRecord(dataview, record);
                me.last_expanded_record=null;
            } else {
                me.expandRecord(dataview, record);
            }
        } else {
            me.collapseLast(dataview);
            me.last_expanded_record=null;
        }

        if(nextview != undefined) {
            me.setCurrentView(nextview, record.data.isPopup);
        }
    },

    // onNavigationTreePanelViewReady: function(tablepanel, eOpts) {
    //     var me=this;
    //     me.addNodeCls(tablepanel.getView(), tablepanel.getRootNode());
    //     if(tablepanel.getRootNode().hasChildNodes()) {
    //         tablepanel.getSelectionModel().select([tablepanel.getRootNode().firstChild])
    //     }

    //     var default_view="dashboard.MainContainer";
    //     var view=default_view;
    //     var whash = window.location.hash;
    //     if(whash.length > 1) {
    //         var url_view=whash.substr(1);
    //         if(url_view in me.valid_views) {
    //             view=url_view;
    //         }
    //     }
    //     var parent=me.valid_views[view];
    //     if(parent != null) {
    //         me.expandRecord(me.ntp.getView(), parent);
    //     }
    //     me.setCurrentView("SenchaDash.view." + view);
    // },

    onMessageBtnClick: function(button, e, eOpts) {
        var messagepopup = Ext.create("SenchaDash.view.MessagesPopupWin");
        // messagepopup.showBy(button);
        messagepopup.show();
    },


    onNotificationBtnClick: function(button, e, eOpts) {
        var notificationPopup = Ext.create("SenchaDash.view.NotificationsPopupWin");
        notificationPopup.show();
    },


    hideNavigation: function() {
        var me=this;
        if(!me.nav_tree_collapsed) {
            me.onBurgerClick();
        }
    },

    onBurgerClick: function(button, e, eOpts) {
        var me=this;
        me.nav_tree_collapsed = !me.nav_tree_collapsed;

        if(me.nav_tree_collapsed) {
            me.collapseLast(me.ntp.getView());
        } else {
            if(me.last_expanded_record) {
                me.expandRecord(me.ntp.getView(), me.last_expanded_record);
            }
        }
        var new_width=250, new_display='inline';
        if(me.nav_tree_collapsed) {
            new_width=80;
            new_display='none';
        }

        Ext.query(".x-tree-node-text", Ext.query("#" + me.ntp.getId())).forEach(
            function(ele, ii) {
                ele.style.display=new_display;
            });
        //Ext.query(".coditas-navigation-tree  .x-title-text")[0].style.display=new_display;
        me.ntp.animate({ to :  { width: new_width } });
        Ext.ComponentQuery.query('#sencha-logo')[0].animate({ to :  { width: new_width } });
    },

    shouldEnableDoubleClick : function(e) {
        return false;
    },
    onMainViewRender:function(){
        var me = this;
        if(window.location.hash=="")
        {
            var nextview = "dashboard.MainContainer";
            me.setCurrentView(nextview);
        }
        Ext.ComponentQuery.query('#main-view-detail-wrap')[0].setHeight(window.innerHeight-65);
        Ext.ComponentQuery.query('#navigationTreePanel')[0].setMinHeight(window.innerHeight-65);
    }
});
