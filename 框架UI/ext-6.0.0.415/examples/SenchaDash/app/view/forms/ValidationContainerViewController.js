/*
 * File: app/view/forms/ValidationContainerViewController.js
 *
 * This file was generated by Sencha Architect version 3.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('SenchaDash.view.forms.ValidationContainerViewController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.formsvalidationcontainer',

    requires: [
        'Ext.form.*'
    ],

    onInformationFormButtonClick: function(button, e, eOpts) {
        var fullnameTextField = Ext.ComponentQuery.query('#fullnameTextField')[0];
        var companyTextField = Ext.ComponentQuery.query('#companyTextField')[0];   
        if(!fullnameTextField.validate())
        fullnameTextField.setActiveError('The full name is required');
        if(!companyTextField.validate())
        companyTextField.setActiveError('The company is required');        
    },

    onAddressFormButtonClick: function(button, e, eOpts) {   
    },

    onButtonClick: function(button, e, eOpts) {        
        var validationFormRadioButtonGroup = Ext.ComponentQuery.query('#validationFormRadioButtonGroup')[0];
        var skillsCheckboxGroup = Ext.ComponentQuery.query('#skillsCheckboxGroup')[0];
        
        if(!validationFormRadioButtonGroup.validate())
        validationFormRadioButtonGroup.setActiveError('The member type is required');
        if(!skillsCheckboxGroup.validate())
        skillsCheckboxGroup.setActiveError("Please choose atleast one programming languages you are good at");
    },

    onFormAfterRender: function(component, eOpts) {
        Ext.apply(Ext.form.field.VTypes, {
            password: function(val, field) {
                if (field.initialPassField) {
                    var pwd = field.up('form').down('#' + field.initialPassField);
                    return (val == pwd.getValue());
                }
                return true;
            },
            passwordText: 'Passwords do not match...'
        });
    },

    onValidateNumberFormButtonClick1: function(button, e, eOpts) {     
        var emailTextField = Ext.ComponentQuery.query('#emailTextField')[0];
        var websiteTextField = Ext.ComponentQuery.query('#websiteTextField')[0];
        var hexColorTextField = Ext.ComponentQuery.query('#hexColorTextField')[0];

        if(!emailTextField.validate())
        emailTextField.setActiveError("The email address is required and can't be empty");
        if(!websiteTextField.validate())
        websiteTextField.setActiveError("The website address is required and can't be empty");
        if(!hexColorTextField.validate())
        hexColorTextField.setActiveError("The hex color is required and can't be empty");
    },

    onNumberFieldFormAfterRender1: function(component, eOpts) {
        var onlyNumberTest = /^([0-9]{1,45})$/;
        var message = "";
        Ext.apply(Ext.form.field.VTypes, {
            onlyNumber: function(val, field) {
                //alert(field.getMaxValue());
                if(onlyNumberTest)
                {
                    if(onlyNumberTest.test(val))
                    {
                        if(val>50)
                        {
                            return true;
                        }
                        else
                        {
                            message = "Please enter a value greater than 50";
                            return false;
                        }
                    }
                    else
                    {
                        message = "The value is not a number";
                        return false;
                    }
                }
                return true;
            },
            onlyNumberText: message,
        });
    },

    onValidateNumberFormButtonClick: function(button, e, eOpts) {        
        var integerTextField = Ext.ComponentQuery.query('#integerTextField')[0];
        var numericTextField = Ext.ComponentQuery.query('#numericTextField')[0];
        var rangeTextField = Ext.ComponentQuery.query('#rangeTextField')[0];

        if(!integerTextField.validate())
        integerTextField.setActiveError("The number is required and can't be empty");
        if(!numericTextField.validate())
        numericTextField.setActiveError("The number is required and can't be empty");
        if(!rangeTextField.validate())
        rangeTextField.setActiveError("The number is required and can't be empty");
    },

    onNumberFieldFormAfterRender: function(component, eOpts) {
        var onlyNumberTest = /^([0-9]{1,45})$/;
        var message = "";
        Ext.apply(Ext.form.field.VTypes, {
            onlyNumber: function(val, field) {
                //alert(field.getMaxValue());
                if(onlyNumberTest)
                {
                    if(onlyNumberTest.test(val))
                    {
                        if(val>50)
                        {
                            return true;
                        }
                        else
                        {
                            message = "Please enter a value greater than 50";
                            return false;
                        }
                    }
                    else
                    {
                        message = "The value is not a number";
                        return false;
                    }
                }
                return true;
            },
            onlyNumberText: message,
        });
    }
});