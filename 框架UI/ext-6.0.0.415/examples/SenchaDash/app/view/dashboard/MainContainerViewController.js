/*
 * File: app/view/dashboard/MainContainerViewController.js
 *
 * This file was generated by Sencha Architect version 3.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('SenchaDash.view.dashboard.MainContainerViewController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.dashboardmaincontainer',

    config: {
        chartIntervalHandle: false
    },

    resizeGridRows: function(grid) {
        var store=grid.getStore();
        var view=grid.getView();

        var num_rows=store.getData().getCount();

        if(num_rows > 0) {
            var total_height=view.getHeight();
            var row_height=Math.floor(total_height/num_rows) -1;

            store.each(function(record) {
                var row=view.getRow(record);
                Ext.fly(row).setHeight(row_height);
            });
        }
    },

    cycleStoreData: function(store, items, num_items) {
               for(var kk = 0; kk < 1000; kk++) {
                   var start_y1=items[0].data.y1value;
                   var start_y2=items[0].data.y2value;
                   for(var ii =0; ii < num_items -1; ii++) {
                       items[ii].data.y1value=items[ii+1].data.y1value;
                       items[ii].data.y2value=items[ii+1].data.y2value;
                   }
                   items[num_items-1].data.y1value=start_y1;
                   items[num_items-1].data.y2value=start_y2;
                   store.load();
               }

    },

    onRefreshToggle: function(tool, e, owner, eOpts) {
        var store=this.getViewModel().getStore('dashboardfulllinechartstore');
        var items=store.getData().items;
        var num_items=items.length;

        var last_x=items[num_items -1].data.xvalue;
        var second_last_x=items[num_items -2].data.xvalue;
        var delta_x=last_x - second_last_x;
        var self = this;

        var ii=0;

        if(tool.toggleValue){
            // check if interval is present
            if(self.chartIntervalHandle){
                clearInterval(self.chartIntervalHandle);
            }
            // change the toggle value
            tool.toggleValue = false;
        }else{


            self.chartIntervalHandle=setInterval(function() {
                last_x += delta_x;
                var first=items[0].data;
                var obj={ xvalue : first.xvalue, y1value : first.y1value, y2value : first.y2value };
                store.removeAt(0);
                store.add(obj);
                ii++;
                //if(ii > 100) {
                //  clearInterval(chartIntervalHandle);
                //}
            }, 150);

            tool.toggleValue = true;
        }




        //debugger;
        //var dmViewController = SenchaDash.app.getController('Navigation').getDashboardMainContainer().getController();
        //dmViewController.cycleStoreData(store, items, num_items);
    },

    onTodoPanelLayout: function(container, layout, eOpts) {
        this.resizeGridRows(container);
    }

});
