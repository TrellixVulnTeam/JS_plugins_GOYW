/*
 * File: app/view/ui/AlertsAndToolTipContainerViewController.js
 *
 * This file was generated by Sencha Architect version 3.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('SenchaDash.view.ui.AlertsAndToolTipContainerViewController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.uialertsandtooltipcontainer',

    init: function() {
        var me=this;
        setTimeout(function() {
            me.onBasicAlertRadioBtnChange({ checked: true });
        }, 500);
    },

    showAlerts: function(titleToShow, textToShow, customIcon, targetToShow, targetToHide, autoClose, buttons) {
        var me = this;

        var options={
            title:       titleToShow,
            layout:     'fit',
            width: 300,
            height: 130,
            cls:'alert-window',
            closable:    true,
            resizable:    false,
            draggable:    false,
            modal:        false,
            border:        false,
            renderTo:targetToShow.getEl(),
            items: [{
                    xtype: 'container',
                    html: textToShow
                }],
            buttons:buttons
        };

        if(customIcon !== false) {
            options['iconCls']=customIcon;
        }


        var msg = new Ext.window.Window(options);

        msg.show();
        if(autoClose)
        {
          Ext.Function.defer(hideAlertBox, 2000, this);

        }
        msg.on("hide",hideAlertBox,this);
        function hideAlertBox(){
            msg.hide();
            if(targetToHide)
                me.handleClosing(targetToHide);
        }
    },

    showToasts: function() {
        Ext.toast({
            html: 'this is toast display',
            align: 'tr',
            closable:false,
            slideInDuration: 400,
            minWidth: 400
        });
    },

    handleClosing: function(targetToClose) {
        var n = targetToClose.length;
        for(var i = 0;i<n;i++)
        {
          targetToClose[i].setHidden(true);
        }

    },

    showTooltips: function(target, anchorAlignment, tipText) {
        var me=this;
        me.current_tooltip=Ext.create('Ext.tip.ToolTip',{
            target: target.el.id,
            anchor: anchorAlignment,
            anchorToTarget: true,
            width: 100,
            style: 'text-align:center',
            html:tipText,
            defaultAlign: 'br-tl'
        });
    },

    showPopover: function(target, alignment) {
        var dialogObject = new Ext.window.Window({
            title:        "My Dialog title",
            layout:     'fit',
            width: 300,
        	height:60,
            modal:        false,
            border:        false,
            animateTarget:target
        }).showBy(target);
    },

    showCommonAlertBox: function() {

    },

    onBasicAlertRadioBtnChange: function(field, newValue, oldValue, eOpts) {
        if(field.checked)
        {
            Ext.WindowManager.each(function(component) {
                if (component.getXType() === 'window') {
                    component.destroy();
                }
            });
            var alertPreviewContainer = Ext.ComponentQuery.query('#alertPreviewContainer')[0];
            var msg = 'Well done! You successfully read this important alert message.';
            this.showAlerts(false,msg,false,alertPreviewContainer,false,false);
        }

    },

    onWithIconAlertRadioBtnChange: function(field, newValue, oldValue, eOpts) {
        if(field.checked)
        {
            Ext.WindowManager.each(function(component) {
                if (component.getXType() === 'window') {
                    component.destroy();
                }
            });
            var alertPreviewContainer = Ext.ComponentQuery.query('#alertPreviewContainer')[0];
            var msg = 'Well done! You successfully read this important alert message.';
            this.showAlerts(false, msg, 'fa fa-check', alertPreviewContainer,false,false);
        }

    },

    onWithTitleAlertRadioBtnChange: function(field, newValue, oldValue, eOpts) {
        if(field.checked)
        {
            Ext.WindowManager.each(function(component) {
                if (component.getXType() === 'window') {
                    component.destroy();
                }
            });
            var alertPreviewContainer = Ext.ComponentQuery.query('#alertPreviewContainer')[0];
            var title = 'You have got 30 Messages';
            var msg = '30 newly unread messages in your inbox';
            this.showAlerts(title,msg,false,alertPreviewContainer,false,false);
        }
    },

    onCustomLayoutAlertRadioBtnChange: function(field, newValue, oldValue, eOpts) {
        if(field.checked)
        {
            Ext.WindowManager.each(function(component) {
                if (component.getXType() === 'window') {
                    component.destroy();
                }
            });
            var alertPreviewContainer = Ext.ComponentQuery.query('#alertPreviewContainer')[0];
            var title = 'You have got 30 Messages';
            var msg = '30 newly unread messages in your inbox';
            buttons = [
            {
                text: 'Take this action',

            },
            {
                text: 'Or do this',

            }
            ];
            this.showAlerts(title,msg,false,alertPreviewContainer,false,false,buttons);
        }
    },

    onShowPanelAlertButtonClick: function(button, e, eOpts) {
        var autoCloseRadioButton = Ext.ComponentQuery.query('#autoCloseRadioButton')[0];
        var autoClose = autoCloseRadioButton.checked?true:false;
        var showPanelAlertContainer = Ext.ComponentQuery.query('#showPanelAlertContainer')[0];
        showPanelAlertContainer.setHidden(false);
        var show2ndPanelAlertContainer = Ext.ComponentQuery.query('#show2ndPanelAlertContainer')[0];
        show2ndPanelAlertContainer.setHidden(false);

        var title = 'You have got 30 Messages';
        var msg = '30 newly unread messages in your inbox';
        //this.showAlerts(showPanelAlertContainer,showPanelAlertContainer,autoClose);
        this.showAlerts(false,msg,false,showPanelAlertContainer,showPanelAlertContainer,autoClose);
        this.showAlerts(false,msg,false,show2ndPanelAlertContainer,show2ndPanelAlertContainer,autoClose);
    },

    onShowToastNotificationButtonClick: function(button, e, eOpts) {
        this.showToasts();
    },

    onLeftToolTipButtonMouseOver: function(button, e, eOpts) {
        this.showTooltips(button,'right','Left tooltip');
    },

    onTopToolTipButtonMouseOver: function(button, e, eOpts) {
        this.showTooltips(button,'bottom','Top tooltip');
    },

    onBottomToolTipButtonMouseOver: function(button, e, eOpts) {
        this.showTooltips(button,'top','Bottom tooltip');
    },

    onRightToolTipButtonMouseOver: function(button, e, eOpts) {
        this.showTooltips(button,'left','Right tooltip');
    }
});
