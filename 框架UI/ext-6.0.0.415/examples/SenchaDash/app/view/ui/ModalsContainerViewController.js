/*
 * File: app/view/ui/ModalsContainerViewController.js
 *
 * This file was generated by Sencha Architect version 3.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('SenchaDash.view.ui.ModalsContainerViewController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.uimodalscontainer',

    requires: [
        'Ext.window.Toast'
    ],

    showCommonOverlay: function(isAnim, animId, height, width, html, itemToAdd, dialogObj) {
        if(html === true){
            var html = 'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.  Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.  Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.';
        }else{
            var html ='';
        }
        var dialogObject = new Ext.window.Window({
            title:        "My Dialog title",
            layout:     'fit',
            width: width === null || width === undefined || width == 'undefined' ? '600' : width,
            height: height === null || height === undefined || height == 'undefined' ? '400' : height,
            closable:    true,
            resizable:    true,
            draggable:    true,
            modal:        true,
            border:        false,
            items:        [ itemToAdd ],
            cls:'customModal',
            html:html
        });

        var oDialog = dialogObj === null || dialogObj === undefined ||
            dialogObj == 'undefined'?dialogObject : dialogObj;
        if(isAnim && animId)
        {
            if(animId===1)
            {
                Ext.create('Ext.fx.Anim', {
                    target: oDialog,
                    duration: 1000,
                    easing: 'bounceOut',
                    from:{
                        top:0
                    },
                    to: {

                        top:100
                    }
                });

            }
            if(animId===2)
            {
                Ext.create('Ext.fx.Anim', {
                    target: oDialog,
                    duration: 300,
                    easing: 'backOut',
                    from:{
                        top:0
                    },
                    to: {
                        top:200
                    }
                });

            }
            if(animId===3)
            {
                Ext.create('Ext.fx.Anim', {
                    target: oDialog,
                    duration: 300,
                    easing: 'easeInOut',
                    from:{
                        left:0
                    },
                    to: {
                        left:350
                    }
                });

            }
            if(animId===4)
            {
                Ext.create('Ext.fx.Anim', {
                    target: oDialog,
                    duration: 1000,
                    easing: 'ease',
                    from:{
                        left:0,
                        top:0
                    },
                    to: {
                        left:350,
                        top:200
                    }
                });

            }
            if(animId===5)
            {
                Ext.create('Ext.fx.Anim', {
                    target: oDialog,
                    duration: 1500,
                    easing: 'ease',
                    keyframes : {
                        '0%': {
                            left: 0
                        },
                        '40%': {
                            left:200,
                            top: 0
                        },
                        '60%': {
                            left:800,
                            top: 200
                        },
                        '100%': {
                            left:200,
                            top: 200
                        }
                    },

                });

            }
        }

        oDialog.show();

    },

    showResult: function(btn, text) {
        this.showToast(Ext.String.format('You clicked the {0} button', btn));
    },

    showToast: function(s, title) {
        Ext.toast({
                    html: s,
                    closable: false,
                    align: 't',
                    slideInDuration: 200,
                    minWidth: 400
                });
    },

    showResultText: function(btn, text) {
        this.showToast(Ext.String.format('You clicked the {0} button and entered the text "{1}".', btn, text));
    },

    saveHtmlForm: function(btn) {
        var textFieldObj = Ext.ComponentQuery.query("#customDialogNameTextField")[0];
        var textFieldValue = textFieldObj.getValue();
        var reallyAwesome = Ext.ComponentQuery.query("#reallyAwesomRadioButton")[0];
        var superAwesome = Ext.ComponentQuery.query("#superAwesomRadioButton")[0];
        var choosen = reallyAwesome.getValue()?"You've chosen Really Awesome":"You've chosen Super Awesome";
        this.showToast(Ext.String.format('Hello '+textFieldValue +"!.<br>"+choosen, btn));

    },

    onShowSlideDownPopupButtonClick: function(button, e, eOpts) {
        var isAnim = true;
        var animId = 1;
        var html = true;
        this.showCommonOverlay(isAnim,animId,250,600,html);
    },

    onShowDefaultPopupButtonClick: function(button, e, eOpts) {
        var isAnim = false;
        var html = true;
        this.showCommonOverlay(isAnim,0,250,600,html);
    },

    onAnim1PopupButtonClick: function(button, e, eOpts) {
        var isAnim = true;
        var animId = 3;
        var html = true;
        this.showCommonOverlay(isAnim,animId,250,600,html);
    },

    onAnim2PopupButtonClick: function(button, e, eOpts) {
        var isAnim = true;
        var animId = 4;
        var html = true;
        this.showCommonOverlay(isAnim,animId,250,600,html);
    },

    onAnim3PopupButtonClick: function(button, e, eOpts) {
        var isAnim = true;
        var animId = 5;
        var html = true;
        this.showCommonOverlay(isAnim,animId,250,600,html);
    },

    onShowWidePopupButtonClick: function(button, e, eOpts) {
        var isAnim = true;
        var animId = 2;
        var html = true;
        this.showCommonOverlay(isAnim,animId,300,800,html);
    },

    onShowSmallPopupButtonClick: function(button, e, eOpts) {
        var isAnim = true;
        var animId = 2;
        var html = true;
        this.showCommonOverlay(isAnim,animId,300,500,html);
    },

    onShowAlertButtonClick: function(button, e, eOpts) {
        var _this=this;
        Ext.MessageBox.alert({
            title: 'Status',
            msg: 'Changes saved successfully.',
            cls:'prompt-box',
            buttons: Ext.MessageBox.OK,
            fn: function(btn) {
               _this.showResult(btn);
            }

        });
        // 'Status', 'Changes saved successfully.', this.showResult, this);
    },

    onShowConfirmButtonClick: function(button, e, eOpts) {
        var _this=this;
        Ext.MessageBox.confirm({
            title: 'Confirm',
            msg: 'Are you sure you want to do that?',
            cls:'prompt-box',
            buttons: Ext.MessageBox.YESNO,
            fn: function(btn) {
               _this.showResult(btn);
            }
        });
        // 'Confirm', 'Are you sure you want to do that?', this.showResult, this);

    },

    onShowPromptButtonClick: function(button, e, eOpts) {
        // var _this=this;
        // Ext.MessageBox.prompt({
        //     title: 'Name',
        //     msg: 'Please enter your name:',
        //     cls:'prompt-box',
        //     buttons: Ext.MessageBox.YESNO,

        //     fn: function(btn,text) {
        //        _this.showResultText(btn,text);
        //     }
        // });
        Ext.MessageBox.prompt('Name', 'Please enter your name:', this.showResultText, this);
    },

    onShowMultiLinePrompBoxButtonClick: function(button, e, eOpts) {
        Ext.MessageBox.show({
            title: 'Address',
            msg: 'Please enter your address:',
            width:300,
            height:230,
            buttons: Ext.MessageBox.OKCANCEL,
            multiline: true,
            cls:'prompt-box-address',
            scope: this,
            fn: this.showResultText,
            animateTarget: button
        });
    },

    onShowProgressBarBoxButtonClick: function(button, e, eOpts) {
        var me = this,
            i = 0,
            fn;

        Ext.MessageBox.show({
            title: 'Please wait',
            msg: 'Loading items...',
            progressText: 'Initializing...',
            width:300,
            cls:'prompt-box',
            progress:true,
            closable:false,
            animateTarget: button
        });

        // Fake progress fn
        fn = function() {
            ++i;
            if (i === 5) {
                Ext.MessageBox.hide();
                me.showToast('Your fake items were loaded', 'Done');
            } else {
                var val = i / 4;
                Ext.MessageBox.updateProgress(val, Math.round(100 * val) + '% completed');
                setTimeout(fn, 500);
            }
        };
        setTimeout(fn, 500);
    },

    onShowYNCBoxButtonClick: function(button, e, eOpts) {
        Ext.MessageBox.show({
            title:'Save Changes?',
            msg: 'You are closing a tab that has unsaved changes. <br />Would you like to save your changes?',
            buttons: Ext.MessageBox.YESNOCANCEL,
            scope: this,
            cls:'prompt-box',
            fn: this.showResult,
            animateTarget: button,
            icon: Ext.MessageBox.QUESTION
        });
    },

    onShowCustomDialogButtonClick: function(button, e, eOpts) {
        var thisController = this;
        var dialogObject = null;
        var itemToAdd = {
            xtype: 'panel',
            flex: 1,
            height: 350,
            html: 'Lorem ipsum dolor sit amet.',
            title: false,
            layout: {
                type: 'hbox',
                align: 'bottom',
                pack: 'end'
            },
            items: [
            {
                xtype: 'button',
                cls: 'confirm-modal-button',
                text: 'Success!',
                margin: '0 10px 0 5px',
                handler: function(e) {
                    thisController.showToast(Ext.String.format('You clicked the Success! button', button));
                }
            },
            {
                xtype: 'button',
                text: 'Danger!',
                cls: 'large-modal-button',
                margin: '0 10px 0 5px',
                handler: function(e) {
                    thisController.showToast(Ext.String.format('You clicked the Danger! button', button));
                }
            },
            {
                xtype: 'button',
                text: 'Click Me!',
                margin: '0 10px 0 5px',
                handler: function(e) {
                    thisController.showToast(Ext.String.format('You clicked the Click Me! button', button));
                }
            }
            ]
        };

        var isAnim = true;
        var animId = 2;
        var html = false;
        this.showCommonOverlay(isAnim,animId,150,400,html,itemToAdd,dialogObject);
    },

    onShowHtmlContentDialogButtonClick: function(button, e, eOpts) {
        var dialogObject = null;
        var itemToAdd = {
            xtype: 'panel',
            flex: 1,
            height: 200,
            title: false,
            layout: {
                type: 'hbox'
            },
            items: [
            {
                xtype: 'image',
                cls: 'html-dialog-userProfilePic',
                height: 100,
                width: 100,
                src: 'resources/images/user-profile/1.png',

            },
            {
                xtype: 'label',
                flex: 3,
                html:'<div class="html-dialog-header">You can also use <strong>html</strong></div><span class="html-dialog-span">Cras sit amet nibh libero,in gravida nulla. Nulla vel metus scelerisque ante sollicitudin commodo. Cras sit amet nibh libero,in gravida nulla. Nulla vel metus scelerisque ante sollicitudin commodo. Cras sit amet nibh libero,in gravida nulla. Nulla vel metus scelerisque ante sollicitudin commodo.</span>'
            }
            ]
        };

        var isAnim = true;
        var animId = 2;
        var html = false;
        this.showCommonOverlay(isAnim,animId,260,400,html,itemToAdd,dialogObject);
    },

    onShowHtmlFormDialogButtonClick: function(button, e, eOpts) {
        var thisController = this;
        var dialogObject = null;
        var itemToAdd = {
            xtype: 'form',
            bodyPadding: 10,
            title: false,
            cls: 'customModal',
            layout: {
                type: 'vbox',
                align: 'stretch'
            },
            items: [
            {
                xtype: 'textfield',
                flex: 1,
                fieldLabel: 'Name',
                labelAlign: 'top',
                inputType: 'text',
                itemId:'customDialogNameTextField'
            },{
                xtype: 'radiogroup',
                flex: 3,
                width: 400,
                fieldLabel: 'How awesome is this?',
                labelAlign: 'top',
                cls: 'html-form-radio-group',
                layout: {
                    type: 'hbox',
                    align: 'stretch'
                },
                items: [
                {
                    xtype: 'radiofield',
                    name: 'basicGroupOneRadioButton',
                    boxLabel: 'Really awesome',
                    itemId:'reallyAwesomRadioButton',
                    margin:'0 10',
                    checked: true

                },
                {
                    xtype: 'radiofield',
                    name: 'basicGroupOneRadioButton',
                    itemId:'superAwesomRadioButton',
                    boxLabel: 'Super awesome',
                    margin:'0 10'
                }
                ]
            },,
            {
                xtype: 'button',
                text: 'save',
                cls: 'html-form-save-button',
                handler: function(e) {
                    thisController.saveHtmlForm(button);
                }
            }
            ]
        };

        var isAnim = true;
        var animId = 2;
        var html = false;
        this.showCommonOverlay(isAnim,animId,250,400,html,itemToAdd,dialogObject);

    }

});
