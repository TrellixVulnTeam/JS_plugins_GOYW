/*
 * File: app/view/util/ProgressbarContainerViewController.js
 *
 * This file was generated by Sencha Architect version 3.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('SenchaDash.view.util.ProgressbarContainerViewController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.uiprogressbarcontainer',

    onBasicProgressBarsPanelAfterRender1: function(component, eOpts) {
        var basic1ProgressBar = Ext.ComponentQuery.query('#basic1ProgressBar')[0];
        basic1ProgressBar.updateText('');
    },

    onSizesProgressBarPanelAfterRender1: function(component, eOpts) {
        var smallProgressBar = Ext.ComponentQuery.query('#smallProgressBar')[0];
        smallProgressBar.updateText('');
        var mediumProgressBar = Ext.ComponentQuery.query('#mediumProgressBar')[0];
        mediumProgressBar.updateText('');
        var largeProgressBar = Ext.ComponentQuery.query('#largeProgressBar')[0];
        largeProgressBar.updateText('');
    },

    onStacked1ProgressBarUpdate: function(progressbar, value, text, eOpts) {
        // var stacked1ProgressBar = Ext.ComponentQuery.query('#stacked1ProgressBar')[0];
        // if((value*10)>50)
        // window.p1 = progressbar;
        // console.log()
        // stacked1ProgressBar.getEl().child(".x-progress-bar", true).style.backgroundColor = "#FF0000";
        // var progressBarValue = Ext.ComponentQuery.query('#progressBarValue')[0];
        // progressBarValue.setValue(value);
    },

    onStackedProgressBarPanelAfterRender: function(component, eOpts) {
        var progressBarValue = Ext.ComponentQuery.query('#progressBarValue')[0];
        var stacked1ProgressBar = Ext.ComponentQuery.query('#stacked1ProgressBar')[0];
        stacked1ProgressBar.on('update', function(obj,val) {
            progressBarValue.setValue(val*100);
            if(val*100>=100)
            {
                stacked1ProgressBar.reset();
                stacked1ProgressBar.updateText('Done!');
                progressBarValue.setValue('Done!');
            }
        });
        stacked1ProgressBar.wait({
            interval: 500,
            increment: 10,
            text: 'Updating...',
            scope: this,
            fn: function () {

                stacked1ProgressBar.updateText('Done!');
            }
        });
        var progressBar2Value = Ext.ComponentQuery.query('#progressBar2Value')[0];
        var stacked2ProgressBar = Ext.ComponentQuery.query('#stacked2ProgressBar')[0];
        var str = 'waiting';
        stacked2ProgressBar.on('update', function(obj,val) {
            str += '.';
            if(val*100<100)
            {
                progressBar2Value.setValue(str);
            }
            else
            {
                stacked2ProgressBar.reset();
                stacked2ProgressBar.updateText('Done!');
                progressBar2Value.setValue('Done!');
            }



        });
        stacked2ProgressBar.wait({
            interval: 500,
            increment: 10,
            text: 'Updating...',
            scope: this,
            fn: function () {

                stacked2ProgressBar.updateText('Done!');
                progressBar2Value.setValue('Done !');
            }
        });


    },

    onCustomProgressBarPanelAfterRender: function(component, eOpts) {
        var customProgressBarValue = Ext.ComponentQuery.query('#customProgressBarValue')[0];
        var customImageProgressBar = Ext.ComponentQuery.query('#customImageProgressBar')[0];
        var customValuesProgressBar = Ext.ComponentQuery.query('#customValuesProgressBar')[0];
        customImageProgressBar.on('update', function(obj,val) {
            customProgressBarValue.setValue(val*100);
            if(val*100>=100)
            {
                customImageProgressBar.reset();
                customImageProgressBar.updateText('Done!');
                customProgressBarValue.setValue('Done!');
                var i = 1;
            }

        });

        customValuesProgressBar.on('update', function(obj,val) {

            customValuesProgressBar.updateText('Loading item '+val*100+' %');
            if(val*100>=100)
            {
                customValuesProgressBar.reset();
                customValuesProgressBar.updateText('Completed');

            }

        });
        customImageProgressBar.wait({
            interval: 500,
            increment: 10,
            text: '',
            scope: this,
            fn: function () {

                customImageProgressBar.updateText('Done!');
                customProgressBarValue.setValue('Done!');
            }
        });


        customValuesProgressBar.wait({
            interval: 500,
            increment: 10,
            text:'',
            scope: this,
            fn: function () {

                customValuesProgressBar.updateText('Done!');

            }
        });
    }

});
